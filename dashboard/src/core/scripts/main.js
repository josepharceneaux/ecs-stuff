(function(parent) {
  'use strict';

  var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

  var // Fleshing out the application architecture
      App = parent.GetTalent || {};
  App.Helper = App.Helper || {};
  App.Module = App.Module || {};
  App.View = App.View || {};

  parent.GetTalent = App;

// Generated by CoffeeScript 1.4.0
  (function () {
    var $;

    $ = window.jQuery || window.Zepto || window.$;

    $.fn.fancySelect = function (opts) {
      var isiOS, settings;
      if (opts == null) {
        opts = {};
      }
      settings = $.extend({
        forceiOS: false,
        includeBlank: false,
        optionTemplate: function optionTemplate(optionEl) {
          return optionEl.text();
        },
        triggerTemplate: function triggerTemplate(optionEl) {
          return optionEl.text();
        }
      }, opts);
      isiOS = !!navigator.userAgent.match(/iP(hone|od|ad)/i);
      return this.each(function () {
        var copyOptionsToList, disabled, options, sel, trigger, updateTriggerText, wrapper;
        sel = $(this);
        if (sel.hasClass('fancified') || sel[0].tagName !== 'SELECT') {
          return;
        }
        sel.addClass('fancified');
        sel.css({
          width: 1,
          height: 1,
          display: 'block',
          position: 'absolute',
          top: 0,
          left: 0,
          opacity: 0
        });
        sel.wrap('<div class="fancy-select">');
        wrapper = sel.parent();
        if (sel.data('class')) {
          wrapper.addClass(sel.data('class'));
        }
        wrapper.append('<div class="trigger">');
        if (!(isiOS && !settings.forceiOS)) {
          wrapper.append('<ul class="options">');
        }
        trigger = wrapper.find('.trigger');
        options = wrapper.find('.options');
        disabled = sel.prop('disabled');
        if (disabled) {
          wrapper.addClass('disabled');
        }
        updateTriggerText = function () {
          var triggerHtml;
          triggerHtml = settings.triggerTemplate(sel.find(':selected'));
          return trigger.html(triggerHtml);
        };
        sel.on('blur.fs', function () {
          if (trigger.hasClass('open')) {
            return setTimeout(function () {
              return trigger.trigger('close.fs');
            }, 120);
          }
        });
        trigger.on('close.fs', function () {
          trigger.removeClass('open');
          return options.removeClass('open');
        });
        trigger.on('click.fs', function () {
          var offParent, parent;
          if (!disabled) {
            trigger.toggleClass('open');
            if (isiOS && !settings.forceiOS) {
              if (trigger.hasClass('open')) {
                return sel.focus();
              }
            } else {
              if (trigger.hasClass('open')) {
                parent = trigger.parent();
                offParent = parent.offsetParent();
                if (parent.offset().top + parent.outerHeight() + options.outerHeight() + 20 > $(window).height() + $(window).scrollTop()) {
                  options.addClass('overflowing');
                } else {
                  options.removeClass('overflowing');
                }
              }
              options.toggleClass('open');
              if (!isiOS) {
                return sel.focus();
              }
            }
          }
        });
        sel.on('enable', function () {
          sel.prop('disabled', false);
          wrapper.removeClass('disabled');
          disabled = false;
          return copyOptionsToList();
        });
        sel.on('disable', function () {
          sel.prop('disabled', true);
          wrapper.addClass('disabled');
          return disabled = true;
        });
        sel.on('change.fs', function (e) {
          if (e.originalEvent && e.originalEvent.isTrusted) {
            return e.stopPropagation();
          } else {
            return updateTriggerText();
          }
        });
        sel.on('keydown', function (e) {
          var hovered, newHovered, w;
          w = e.which;
          hovered = options.find('.hover');
          hovered.removeClass('hover');
          if (!options.hasClass('open')) {
            if (w === 13 || w === 32 || w === 38 || w === 40) {
              e.preventDefault();
              return trigger.trigger('click.fs');
            }
          } else {
            if (w === 38) {
              e.preventDefault();
              if (hovered.length && hovered.index() > 0) {
                hovered.prev().addClass('hover');
              } else {
                options.find('li:last-child').addClass('hover');
              }
            } else if (w === 40) {
              e.preventDefault();
              if (hovered.length && hovered.index() < options.find('li').length - 1) {
                hovered.next().addClass('hover');
              } else {
                options.find('li:first-child').addClass('hover');
              }
            } else if (w === 27) {
              e.preventDefault();
              trigger.trigger('click.fs');
            } else if (w === 13 || w === 32) {
              e.preventDefault();
              hovered.trigger('mousedown.fs');
            } else if (w === 9) {
              if (trigger.hasClass('open')) {
                trigger.trigger('close.fs');
              }
            }
            newHovered = options.find('.hover');
            if (newHovered.length) {
              options.scrollTop(0);
              return options.scrollTop(newHovered.position().top - 12);
            }
          }
        });
        options.on('mousedown.fs', 'li', function (e) {
          var clicked;
          clicked = $(this);
          sel.val(clicked.data('raw-value'));
          if (!isiOS) {
            sel.trigger('blur.fs').trigger('focus.fs');
          }
          options.find('.selected').removeClass('selected');
          clicked.addClass('selected');
          trigger.addClass('selected');
          return sel.val(clicked.data('raw-value')).trigger('change.fs').trigger('blur.fs').trigger('focus.fs');
        });
        options.on('mouseenter.fs', 'li', function () {
          var hovered, nowHovered;
          nowHovered = $(this);
          hovered = options.find('.hover');
          hovered.removeClass('hover');
          return nowHovered.addClass('hover');
        });
        options.on('mouseleave.fs', 'li', function () {
          return options.find('.hover').removeClass('hover');
        });
        copyOptionsToList = function () {
          var selOpts;
          updateTriggerText();
          if (isiOS && !settings.forceiOS) {
            return;
          }
          selOpts = sel.find('option');
          return sel.find('option').each(function (i, opt) {
            var optHtml;
            opt = $(opt);
            if (!opt.prop('disabled') && (opt.val() || settings.includeBlank)) {
              optHtml = settings.optionTemplate(opt);
              if (opt.prop('selected')) {
                return options.append("<li data-raw-value=\"" + opt.val() + "\" class=\"selected\">" + optHtml + "</li>");
              } else {
                return options.append("<li data-raw-value=\"" + opt.val() + "\">" + optHtml + "</li>");
              }
            }
          });
        };
        sel.on('update.fs', function () {
          wrapper.find('.options').empty();
          return copyOptionsToList();
        });
        return copyOptionsToList();
      });
    };
  }).call(undefined);

  /*

   jQuery Tags Input Plugin 1.3.3

   Copyright (c) 2011 XOXCO, Inc

   Documentation for this plugin lives here:
   http://xoxco.com/clickable/jquery-tags-input

   Licensed under the MIT license:
   http://www.opensource.org/licenses/mit-license.php

   ben@xoxco.com

   */

  (function ($) {

    var delimiter = new Array();
    var tags_callbacks = new Array();
    $.fn.doAutosize = function (o) {
      var minWidth = $(this).data('minwidth'),
          maxWidth = $(this).data('maxwidth'),
          val = '',
          input = $(this),
          testSubject = $('#' + $(this).data('tester_id'));

      if (val === (val = input.val())) {
        return;
      }

      // Enter new content into testSubject
      var escaped = val.replace(/&/g, '&amp;').replace(/\s/g, ' ').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      testSubject.html(escaped);
      // Calculate new width + whether to change
      var testerWidth = testSubject.width(),
          newWidth = testerWidth + o.comfortZone >= minWidth ? testerWidth + o.comfortZone : minWidth,
          currentWidth = input.width(),
          isValidWidthChange = newWidth < currentWidth && newWidth >= minWidth || newWidth > minWidth && newWidth < maxWidth;

      // Animate width
      if (isValidWidthChange) {
        input.width(newWidth);
      }
    };
    $.fn.resetAutosize = function (options) {
      // alert(JSON.stringify(options));
      var minWidth = $(this).data('minwidth') || options.minInputWidth || $(this).width(),
          maxWidth = $(this).data('maxwidth') || options.maxInputWidth || $(this).closest('.tagsinput').width() - options.inputPadding,
          val = '',
          input = $(this),
          testSubject = $('<tester/>').css({
            position: 'absolute',
            top: -9999,
            left: -9999,
            width: 'auto',
            fontSize: input.css('fontSize'),
            fontFamily: input.css('fontFamily'),
            fontWeight: input.css('fontWeight'),
            letterSpacing: input.css('letterSpacing'),
            whiteSpace: 'nowrap'
          }),
          testerId = $(this).attr('id') + '_autosize_tester';
      if (!$('#' + testerId).length > 0) {
        testSubject.attr('id', testerId);
        testSubject.appendTo('body');
      }

      input.data('minwidth', minWidth);
      input.data('maxwidth', maxWidth);
      input.data('tester_id', testerId);
      input.css('width', minWidth);
    };

    $.fn.addTag = function (value, options) {
      options = jQuery.extend({ focus: false, callback: true }, options);
      this.each(function () {
        var id = $(this).attr('id');

        var tagslist = $(this).val().split(delimiter[id]);
        if (tagslist[0] == '') {
          tagslist = new Array();
        }

        value = jQuery.trim(value);

        if (options.unique) {
          var skipTag = $(this).tagExist(value);
          if (skipTag == true) {
            //Marks fake input as not_valid to let styling it
            $('#' + id + '_tag').addClass('not_valid');
          }
        } else {
          var skipTag = false;
        }

        if (value != '' && skipTag != true) {
          $('<span>').addClass('tag').append($('<span>').text(value).append('&nbsp;&nbsp;'), $('<a>', {
            href: '#',
            'class': 'tag--close',
            title: 'Remove Tag',
            text: ''
          }).click(function () {
            return $('#' + id).removeTag(escape(value));
          })).insertBefore('#' + id + '_addTag');

          tagslist.push(value);

          $('#' + id + '_tag').val('');
          if (options.focus) {
            $('#' + id + '_tag').focus();
          } else {
            $('#' + id + '_tag').blur();
          }

          $.fn.tagsInput.updateTagsField(this, tagslist);

          if (options.callback && tags_callbacks[id] && tags_callbacks[id]['onAddTag']) {
            var f = tags_callbacks[id]['onAddTag'];
            f.call(this, value);
          }
          if (tags_callbacks[id] && tags_callbacks[id]['onChange']) {
            var i = tagslist.length;
            var f = tags_callbacks[id]['onChange'];
            f.call(this, $(this), tagslist[i - 1]);
          }
        }
      });

      return false;
    };

    $.fn.removeTag = function (value) {
      value = unescape(value);
      this.each(function () {
        var id = $(this).attr('id');

        var old = $(this).val().split(delimiter[id]);

        $('#' + id + '_tagsinput .tag').remove();
        str = '';
        for (i = 0; i < old.length; i++) {
          if (old[i] != value) {
            str = str + delimiter[id] + old[i];
          }
        }

        $.fn.tagsInput.importTags(this, str);

        if (tags_callbacks[id] && tags_callbacks[id]['onRemoveTag']) {
          var f = tags_callbacks[id]['onRemoveTag'];
          f.call(this, value);
        }
      });

      return false;
    };

    $.fn.tagExist = function (val) {
      var id = $(this).attr('id');
      var tagslist = $(this).val().split(delimiter[id]);
      return jQuery.inArray(val, tagslist) >= 0; //true when tag exists, false when not
    };

    // clear all existing tags and import new ones from a string
    $.fn.importTags = function (str) {
      var id = $(this).attr('id');
      $('#' + id + '_tagsinput .tag').remove();
      $.fn.tagsInput.importTags(this, str);
    };

    $.fn.tagsInput = function (options) {
      var settings = jQuery.extend({
        interactive: true,
        defaultText: 'add a tag',
        minChars: 0,
        width: '300px',
        height: '100px',
        autocomplete: { selectFirst: false },
        hide: true,
        delimiter: ',',
        unique: true,
        removeWithBackspace: true,
        placeholderColor: '#666666',
        autosize: true,
        comfortZone: 20,
        inputPadding: 6 * 2
      }, options);

      var uniqueIdCounter = 0;

      this.each(function () {
        // If we have already initialized the field, do not do it again
        if (typeof $(this).attr('data-tagsinput-init') !== 'undefined') {
          return;
        }

        // Mark the field as having been initialized
        $(this).attr('data-tagsinput-init', true);

        if (settings.hide) {
          $(this).hide();
        }
        var id = $(this).attr('id');
        if (!id || delimiter[$(this).attr('id')]) {
          id = $(this).attr('id', 'tags' + new Date().getTime() + uniqueIdCounter++).attr('id');
        }

        var data = jQuery.extend({
          pid: id,
          real_input: '#' + id,
          holder: '#' + id + '_tagsinput',
          input_wrapper: '#' + id + '_addTag',
          fake_input: '#' + id + '_tag'
        }, settings);

        delimiter[id] = data.delimiter;

        if (settings.onAddTag || settings.onRemoveTag || settings.onChange) {
          tags_callbacks[id] = new Array();
          tags_callbacks[id]['onAddTag'] = settings.onAddTag;
          tags_callbacks[id]['onRemoveTag'] = settings.onRemoveTag;
          tags_callbacks[id]['onChange'] = settings.onChange;
        }

        var markup = '<div id="' + id + '_tagsinput" class="tagsinput"><div id="' + id + '_addTag">';

        if (settings.interactive) {
          markup = markup + '<input id="' + id + '_tag" class="js-floatLabel" value="" data-default="' + settings.defaultText + '" />';
        }

        markup = markup + '</div><div class="tags_clear"></div></div>';

        $(markup).insertAfter(this);

        $(data.holder).css('width', settings.width);
        $(data.holder).css('min-height', settings.height);
        $(data.holder).css('height', settings.height);

        if ($(data.real_input).val() != '') {
          $.fn.tagsInput.importTags($(data.real_input), $(data.real_input).val());
        }
        if (settings.interactive) {
          $(data.fake_input).val($(data.fake_input).attr('data-default'));
          $(data.fake_input).css('color', settings.placeholderColor);
          $(data.fake_input).resetAutosize(settings);

          $(data.holder).bind('click', data, function (event) {
            $(event.data.fake_input).focus();
          });

          $(data.fake_input).bind('focus', data, function (event) {
            if ($(event.data.fake_input).val() == $(event.data.fake_input).attr('data-default')) {
              $(event.data.fake_input).val('');
            }
            $(event.data.fake_input).css('color', '#000000');
          });

          if (settings.autocomplete_url != undefined) {
            autocomplete_options = { source: settings.autocomplete_url };
            for (attrname in settings.autocomplete) {
              autocomplete_options[attrname] = settings.autocomplete[attrname];
            }

            if (jQuery.Autocompleter !== undefined) {
              $(data.fake_input).autocomplete(settings.autocomplete_url, settings.autocomplete);
              $(data.fake_input).bind('result', data, function (event, data, formatted) {
                if (data) {
                  $('#' + id).addTag(data[0] + "", { focus: true, unique: settings.unique });
                }
              });
            } else if (jQuery.ui.autocomplete !== undefined) {
              $(data.fake_input).autocomplete(autocomplete_options);
              $(data.fake_input).bind('autocompleteselect', data, function (event, ui) {
                $(event.data.real_input).addTag(ui.item.value, { focus: true, unique: settings.unique });
                return false;
              });
            }
          } else {
            // if a user tabs out of the field, create a new tag
            // this is only available if autocomplete is not used.
            $(data.fake_input).bind('blur', data, function (event) {
              var d = $(this).attr('data-default');
              if ($(event.data.fake_input).val() != '' && $(event.data.fake_input).val() != d) {
                if (event.data.minChars <= $(event.data.fake_input).val().length && (!event.data.maxChars || event.data.maxChars >= $(event.data.fake_input).val().length)) $(event.data.real_input).addTag($(event.data.fake_input).val(), { focus: true, unique: settings.unique });
              } else {
                $(event.data.fake_input).val($(event.data.fake_input).attr('data-default'));
                $(event.data.fake_input).css('color', settings.placeholderColor);
              }
              return false;
            });
          }
          // if user types a default delimiter like comma,semicolon and then create a new tag
          $(data.fake_input).bind('keypress', data, function (event) {
            if (_checkDelimiter(event)) {
              event.preventDefault();
              if (event.data.minChars <= $(event.data.fake_input).val().length && (!event.data.maxChars || event.data.maxChars >= $(event.data.fake_input).val().length)) $(event.data.real_input).addTag($(event.data.fake_input).val(), { focus: true, unique: settings.unique });
              $(event.data.fake_input).resetAutosize(settings);
              return false;
            } else if (event.data.autosize) {
              $(event.data.fake_input).doAutosize(settings);
            }
          });
          //Delete last tag on backspace
          data.removeWithBackspace && $(data.fake_input).bind('keydown', function (event) {
            if (event.keyCode == 8 && $(this).val() == '') {
              event.preventDefault();
              var last_tag = $(this).closest('.tagsinput').find('.tag:last').text();
              var id = $(this).attr('id').replace(/_tag$/, '');
              last_tag = last_tag.replace(/[\s]+x$/, '');
              $('#' + id).removeTag(escape(last_tag));
              $(this).trigger('focus');
            }
          });
          $(data.fake_input).blur();

          //Removes the not_valid class when user changes the value of the fake input
          if (data.unique) {
            $(data.fake_input).keydown(function (event) {
              if (event.keyCode == 8 || String.fromCharCode(event.which).match(/\w+|[áéíóúÁÉÍÓÚñÑ,/]+/)) {
                $(this).removeClass('not_valid');
              }
            });
          }
        } // if settings.interactive
      });

      return this;
    };

    $.fn.tagsInput.updateTagsField = function (obj, tagslist) {
      var id = $(obj).attr('id');
      $(obj).val(tagslist.join(delimiter[id]));
    };

    $.fn.tagsInput.importTags = function (obj, val) {
      $(obj).val('');
      var id = $(obj).attr('id');
      var tags = val.split(delimiter[id]);
      for (i = 0; i < tags.length; i++) {
        $(obj).addTag(tags[i], { focus: false, callback: false });
      }
      if (tags_callbacks[id] && tags_callbacks[id]['onChange']) {
        var f = tags_callbacks[id]['onChange'];
        f.call(obj, obj, tags[i]);
      }
    };

    /**
     * check delimiter Array
     * @param event
     * @returns {boolean}
     * @private
     */
    var _checkDelimiter = function _checkDelimiter(event) {
      var found = false;
      if (event.which == 13) {
        return true;
      }

      if (typeof event.data.delimiter === 'string') {
        if (event.which == event.data.delimiter.charCodeAt(0)) {
          found = true;
        }
      } else {
        $.each(event.data.delimiter, function (index, delimiter) {
          if (event.which == delimiter.charCodeAt(0)) {
            found = true;
          }
        });
      }

      return found;
    };
  })(jQuery);

  /*! Magnific Popup - v1.0.0 - 2015-09-17
   * http://dimsemenov.com/plugins/magnific-popup/
   * Copyright (c) 2015 Dmitry Semenov; */
  ;(function (factory) {
    if (typeof define === 'function' && define.amd) {
      // AMD. Register as an anonymous module.
      define(['jquery'], factory);
    } else if (typeof exports === 'object') {
      // Node/CommonJS
      factory(require('jquery'));
    } else {
      // Browser globals
      factory(window.jQuery || window.Zepto);
    }
  })(function ($) {

    /*>>core*/
    /**
     *
     * Magnific Popup Core JS file
     *
     */

    /**
     * Private static constants
     */
    var CLOSE_EVENT = 'Close',
        BEFORE_CLOSE_EVENT = 'BeforeClose',
        AFTER_CLOSE_EVENT = 'AfterClose',
        BEFORE_APPEND_EVENT = 'BeforeAppend',
        MARKUP_PARSE_EVENT = 'MarkupParse',
        OPEN_EVENT = 'Open',
        CHANGE_EVENT = 'Change',
        NS = 'mfp',
        EVENT_NS = '.' + NS,
        READY_CLASS = 'mfp-ready',
        REMOVING_CLASS = 'mfp-removing',
        PREVENT_CLOSE_CLASS = 'mfp-prevent-close';

    /**
     * Private vars
     */
    /*jshint -W079 */
    var mfp,
    // As we have only one instance of MagnificPopup object, we define it locally to not to use 'this'
        MagnificPopup = function MagnificPopup() {},
        _isJQ = !!window.jQuery,
        _prevStatus,
        _window = $(window),
        _document,
        _prevContentType,
        _wrapClasses,
        _currPopupType;

    /**
     * Private functions
     */
    var _mfpOn = function _mfpOn(name, f) {
          mfp.ev.on(NS + name + EVENT_NS, f);
        },
        _getEl = function _getEl(className, appendTo, html, raw) {
          var el = document.createElement('div');
          el.className = 'mfp-' + className;
          if (html) {
            el.innerHTML = html;
          }
          if (!raw) {
            el = $(el);
            if (appendTo) {
              el.appendTo(appendTo);
            }
          } else if (appendTo) {
            appendTo.appendChild(el);
          }
          return el;
        },
        _mfpTrigger = function _mfpTrigger(e, data) {
          mfp.ev.triggerHandler(NS + e, data);

          if (mfp.st.callbacks) {
            // converts "mfpEventName" to "eventName" callback and triggers it if it's present
            e = e.charAt(0).toLowerCase() + e.slice(1);
            if (mfp.st.callbacks[e]) {
              mfp.st.callbacks[e].apply(mfp, $.isArray(data) ? data : [data]);
            }
          }
        },
        _getCloseBtn = function _getCloseBtn(type) {
          if (type !== _currPopupType || !mfp.currTemplate.closeBtn) {
            mfp.currTemplate.closeBtn = $(mfp.st.closeMarkup.replace('%title%', mfp.st.tClose));
            _currPopupType = type;
          }
          return mfp.currTemplate.closeBtn;
        },

    // Initialize Magnific Popup only when called at least once
        _checkInstance = function _checkInstance() {
          if (!$.magnificPopup.instance) {
            /*jshint -W020 */
            mfp = new MagnificPopup();
            mfp.init();
            $.magnificPopup.instance = mfp;
          }
        },

    // CSS transition detection, http://stackoverflow.com/questions/7264899/detect-css-transitions-using-javascript-and-without-modernizr
        supportsTransitions = function supportsTransitions() {
          var s = document.createElement('p').style,
          // 's' for style. better to create an element if body yet to exist
              v = ['ms', 'O', 'Moz', 'Webkit']; // 'v' for vendor

          if (s['transition'] !== undefined) {
            return true;
          }

          while (v.length) {
            if (v.pop() + 'Transition' in s) {
              return true;
            }
          }

          return false;
        };

    /**
     * Public functions
     */
    MagnificPopup.prototype = {

      constructor: MagnificPopup,

      /**
       * Initializes Magnific Popup plugin.
       * This function is triggered only once when $.fn.magnificPopup or $.magnificPopup is executed
       */
      init: function init() {
        var appVersion = navigator.appVersion;
        mfp.isIE7 = appVersion.indexOf("MSIE 7.") !== -1;
        mfp.isIE8 = appVersion.indexOf("MSIE 8.") !== -1;
        mfp.isLowIE = mfp.isIE7 || mfp.isIE8;
        mfp.isAndroid = /android/gi.test(appVersion);
        mfp.isIOS = /iphone|ipad|ipod/gi.test(appVersion);
        mfp.supportsTransition = supportsTransitions();

        // We disable fixed positioned lightbox on devices that don't handle it nicely.
        // If you know a better way of detecting this - let me know.
        mfp.probablyMobile = mfp.isAndroid || mfp.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent);
        _document = $(document);

        mfp.popupsCache = {};
      },

      /**
       * Opens popup
       * @param  data [description]
       */
      open: function open(data) {

        var i;

        if (data.isObj === false) {
          // convert jQuery collection to array to avoid conflicts later
          mfp.items = data.items.toArray();

          mfp.index = 0;
          var items = data.items,
              item;
          for (i = 0; i < items.length; i++) {
            item = items[i];
            if (item.parsed) {
              item = item.el[0];
            }
            if (item === data.el[0]) {
              mfp.index = i;
              break;
            }
          }
        } else {
          mfp.items = $.isArray(data.items) ? data.items : [data.items];
          mfp.index = data.index || 0;
        }

        // if popup is already opened - we just update the content
        if (mfp.isOpen) {
          mfp.updateItemHTML();
          return;
        }

        mfp.types = [];
        _wrapClasses = '';
        if (data.mainEl && data.mainEl.length) {
          mfp.ev = data.mainEl.eq(0);
        } else {
          mfp.ev = _document;
        }

        if (data.key) {
          if (!mfp.popupsCache[data.key]) {
            mfp.popupsCache[data.key] = {};
          }
          mfp.currTemplate = mfp.popupsCache[data.key];
        } else {
          mfp.currTemplate = {};
        }

        mfp.st = $.extend(true, {}, $.magnificPopup.defaults, data);
        mfp.fixedContentPos = mfp.st.fixedContentPos === 'auto' ? !mfp.probablyMobile : mfp.st.fixedContentPos;

        if (mfp.st.modal) {
          mfp.st.closeOnContentClick = false;
          mfp.st.closeOnBgClick = false;
          mfp.st.showCloseBtn = false;
          mfp.st.enableEscapeKey = false;
        }

        // Building markup
        // main containers are created only once
        if (!mfp.bgOverlay) {

          // Dark overlay
          mfp.bgOverlay = _getEl('bg').on('click' + EVENT_NS, function () {
            mfp.close();
          });

          mfp.wrap = _getEl('wrap').attr('tabindex', -1).on('click' + EVENT_NS, function (e) {
            if (mfp._checkIfClose(e.target)) {
              mfp.close();
            }
          });

          mfp.container = _getEl('container', mfp.wrap);
        }

        mfp.contentContainer = _getEl('content');
        if (mfp.st.preloader) {
          mfp.preloader = _getEl('preloader', mfp.container, mfp.st.tLoading);
        }

        // Initializing modules
        var modules = $.magnificPopup.modules;
        for (i = 0; i < modules.length; i++) {
          var n = modules[i];
          n = n.charAt(0).toUpperCase() + n.slice(1);
          mfp['init' + n].call(mfp);
        }
        _mfpTrigger('BeforeOpen');

        if (mfp.st.showCloseBtn) {
          // Close button
          if (!mfp.st.closeBtnInside) {
            mfp.wrap.append(_getCloseBtn());
          } else {
            _mfpOn(MARKUP_PARSE_EVENT, function (e, template, values, item) {
              values.close_replaceWith = _getCloseBtn(item.type);
            });
            _wrapClasses += ' mfp-close-btn-in';
          }
        }

        if (mfp.st.alignTop) {
          _wrapClasses += ' mfp-align-top';
        }

        if (mfp.fixedContentPos) {
          mfp.wrap.css({
            overflow: mfp.st.overflowY,
            overflowX: 'hidden',
            overflowY: mfp.st.overflowY
          });
        } else {
          mfp.wrap.css({
            top: _window.scrollTop(),
            position: 'absolute'
          });
        }
        if (mfp.st.fixedBgPos === false || mfp.st.fixedBgPos === 'auto' && !mfp.fixedContentPos) {
          mfp.bgOverlay.css({
            height: _document.height(),
            position: 'absolute'
          });
        }

        if (mfp.st.enableEscapeKey) {
          // Close on ESC key
          _document.on('keyup' + EVENT_NS, function (e) {
            if (e.keyCode === 27) {
              mfp.close();
            }
          });
        }

        _window.on('resize' + EVENT_NS, function () {
          mfp.updateSize();
        });

        if (!mfp.st.closeOnContentClick) {
          _wrapClasses += ' mfp-auto-cursor';
        }

        if (_wrapClasses) mfp.wrap.addClass(_wrapClasses);

        // this triggers recalculation of layout, so we get it once to not to trigger twice
        var windowHeight = mfp.wH = _window.height();

        var windowStyles = {};

        if (mfp.fixedContentPos) {
          if (mfp._hasScrollBar(windowHeight)) {
            var s = mfp._getScrollbarSize();
            if (s) {
              windowStyles.marginRight = s;
            }
          }
        }

        if (mfp.fixedContentPos) {
          if (!mfp.isIE7) {
            windowStyles.overflow = 'hidden';
          } else {
            // ie7 double-scroll bug
            $('body, html').css('overflow', 'hidden');
          }
        }

        var classesToadd = mfp.st.mainClass;
        if (mfp.isIE7) {
          classesToadd += ' mfp-ie7';
        }
        if (classesToadd) {
          mfp._addClassToMFP(classesToadd);
        }

        // add content
        mfp.updateItemHTML();

        _mfpTrigger('BuildControls');

        // remove scrollbar, add margin e.t.c
        $('html').css(windowStyles);

        // add everything to DOM
        mfp.bgOverlay.add(mfp.wrap).prependTo(mfp.st.prependTo || $(document.body));

        // Save last focused element
        mfp._lastFocusedEl = document.activeElement;

        // Wait for next cycle to allow CSS transition
        setTimeout(function () {

          if (mfp.content) {
            mfp._addClassToMFP(READY_CLASS);
            mfp._setFocus();
          } else {
            // if content is not defined (not loaded e.t.c) we add class only for BG
            mfp.bgOverlay.addClass(READY_CLASS);
          }

          // Trap the focus in popup
          _document.on('focusin' + EVENT_NS, mfp._onFocusIn);
        }, 16);

        mfp.isOpen = true;
        mfp.updateSize(windowHeight);
        _mfpTrigger(OPEN_EVENT);

        return data;
      },

      /**
       * Closes the popup
       */
      close: function close() {
        if (!mfp.isOpen) return;
        _mfpTrigger(BEFORE_CLOSE_EVENT);

        mfp.isOpen = false;
        // for CSS3 animation
        if (mfp.st.removalDelay && !mfp.isLowIE && mfp.supportsTransition) {
          mfp._addClassToMFP(REMOVING_CLASS);
          setTimeout(function () {
            mfp._close();
          }, mfp.st.removalDelay);
        } else {
          mfp._close();
        }
      },

      /**
       * Helper for close() function
       */
      _close: function _close() {
        _mfpTrigger(CLOSE_EVENT);

        var classesToRemove = REMOVING_CLASS + ' ' + READY_CLASS + ' ';

        mfp.bgOverlay.detach();
        mfp.wrap.detach();
        mfp.container.empty();

        if (mfp.st.mainClass) {
          classesToRemove += mfp.st.mainClass + ' ';
        }

        mfp._removeClassFromMFP(classesToRemove);

        if (mfp.fixedContentPos) {
          var windowStyles = { marginRight: '' };
          if (mfp.isIE7) {
            $('body, html').css('overflow', '');
          } else {
            windowStyles.overflow = '';
          }
          $('html').css(windowStyles);
        }

        _document.off('keyup' + EVENT_NS + ' focusin' + EVENT_NS);
        mfp.ev.off(EVENT_NS);

        // clean up DOM elements that aren't removed
        mfp.wrap.attr('class', 'mfp-wrap').removeAttr('style');
        mfp.bgOverlay.attr('class', 'mfp-bg');
        mfp.container.attr('class', 'mfp-container');

        // remove close button from target element
        if (mfp.st.showCloseBtn && (!mfp.st.closeBtnInside || mfp.currTemplate[mfp.currItem.type] === true)) {
          if (mfp.currTemplate.closeBtn) mfp.currTemplate.closeBtn.detach();
        }

        if (mfp._lastFocusedEl) {
          $(mfp._lastFocusedEl).focus(); // put tab focus back
        }
        mfp.currItem = null;
        mfp.content = null;
        mfp.currTemplate = null;
        mfp.prevHeight = 0;

        _mfpTrigger(AFTER_CLOSE_EVENT);
      },

      updateSize: function updateSize(winHeight) {

        if (mfp.isIOS) {
          // fixes iOS nav bars https://github.com/dimsemenov/Magnific-Popup/issues/2
          var zoomLevel = document.documentElement.clientWidth / window.innerWidth;
          var height = window.innerHeight * zoomLevel;
          mfp.wrap.css('height', height);
          mfp.wH = height;
        } else {
          mfp.wH = winHeight || _window.height();
        }
        // Fixes #84: popup incorrectly positioned with position:relative on body
        if (!mfp.fixedContentPos) {
          mfp.wrap.css('height', mfp.wH);
        }

        _mfpTrigger('Resize');
      },

      /**
       * Set content of popup based on current index
       */
      updateItemHTML: function updateItemHTML() {
        var item = mfp.items[mfp.index];

        // Detach and perform modifications
        mfp.contentContainer.detach();

        if (mfp.content) mfp.content.detach();

        if (!item.parsed) {
          item = mfp.parseEl(mfp.index);
        }

        var type = item.type;

        _mfpTrigger('BeforeChange', [mfp.currItem ? mfp.currItem.type : '', type]);
        // BeforeChange event works like so:
        // _mfpOn('BeforeChange', function(e, prevType, newType) { });

        mfp.currItem = item;

        if (!mfp.currTemplate[type]) {
          var markup = mfp.st[type] ? mfp.st[type].markup : false;

          // allows to modify markup
          _mfpTrigger('FirstMarkupParse', markup);

          if (markup) {
            mfp.currTemplate[type] = $(markup);
          } else {
            // if there is no markup found we just define that template is parsed
            mfp.currTemplate[type] = true;
          }
        }

        if (_prevContentType && _prevContentType !== item.type) {
          mfp.container.removeClass('mfp-' + _prevContentType + '-holder');
        }

        var newContent = mfp['get' + type.charAt(0).toUpperCase() + type.slice(1)](item, mfp.currTemplate[type]);
        mfp.appendContent(newContent, type);

        item.preloaded = true;

        _mfpTrigger(CHANGE_EVENT, item);
        _prevContentType = item.type;

        // Append container back after its content changed
        mfp.container.prepend(mfp.contentContainer);

        _mfpTrigger('AfterChange');
      },

      /**
       * Set HTML content of popup
       */
      appendContent: function appendContent(newContent, type) {
        mfp.content = newContent;

        if (newContent) {
          if (mfp.st.showCloseBtn && mfp.st.closeBtnInside && mfp.currTemplate[type] === true) {
            // if there is no markup, we just append close button element inside
            if (!mfp.content.find('.mfp-close').length) {
              mfp.content.append(_getCloseBtn());
            }
          } else {
            mfp.content = newContent;
          }
        } else {
          mfp.content = '';
        }

        _mfpTrigger(BEFORE_APPEND_EVENT);
        mfp.container.addClass('mfp-' + type + '-holder');

        mfp.contentContainer.append(mfp.content);
      },

      /**
       * Creates Magnific Popup data object based on given data
       * @param  {int} index Index of item to parse
       */
      parseEl: function parseEl(index) {
        var item = mfp.items[index],
            type;

        if (item.tagName) {
          item = { el: $(item) };
        } else {
          type = item.type;
          item = { data: item, src: item.src };
        }

        if (item.el) {
          var types = mfp.types;

          // check for 'mfp-TYPE' class
          for (var i = 0; i < types.length; i++) {
            if (item.el.hasClass('mfp-' + types[i])) {
              type = types[i];
              break;
            }
          }

          item.src = item.el.attr('data-mfp-src');
          if (!item.src) {
            item.src = item.el.attr('href');
          }
        }

        item.type = type || mfp.st.type || 'inline';
        item.index = index;
        item.parsed = true;
        mfp.items[index] = item;
        _mfpTrigger('ElementParse', item);

        return mfp.items[index];
      },

      /**
       * Initializes single popup or a group of popups
       */
      addGroup: function addGroup(el, options) {
        var eHandler = function eHandler(e) {
          e.mfpEl = this;
          mfp._openClick(e, el, options);
        };

        if (!options) {
          options = {};
        }

        var eName = 'click.magnificPopup';
        options.mainEl = el;

        if (options.items) {
          options.isObj = true;
          el.off(eName).on(eName, eHandler);
        } else {
          options.isObj = false;
          if (options.delegate) {
            el.off(eName).on(eName, options.delegate, eHandler);
          } else {
            options.items = el;
            el.off(eName).on(eName, eHandler);
          }
        }
      },
      _openClick: function _openClick(e, el, options) {
        var midClick = options.midClick !== undefined ? options.midClick : $.magnificPopup.defaults.midClick;

        if (!midClick && (e.which === 2 || e.ctrlKey || e.metaKey || e.altKey || e.shiftKey)) {
          return;
        }

        var disableOn = options.disableOn !== undefined ? options.disableOn : $.magnificPopup.defaults.disableOn;

        if (disableOn) {
          if ($.isFunction(disableOn)) {
            if (!disableOn.call(mfp)) {
              return true;
            }
          } else {
            // else it's number
            if (_window.width() < disableOn) {
              return true;
            }
          }
        }

        if (e.type) {
          e.preventDefault();

          // This will prevent popup from closing if element is inside and popup is already opened
          if (mfp.isOpen) {
            e.stopPropagation();
          }
        }

        options.el = $(e.mfpEl);
        if (options.delegate) {
          options.items = el.find(options.delegate);
        }
        mfp.open(options);
      },

      /**
       * Updates text on preloader
       */
      updateStatus: function updateStatus(status, text) {

        if (mfp.preloader) {
          if (_prevStatus !== status) {
            mfp.container.removeClass('mfp-s-' + _prevStatus);
          }

          if (!text && status === 'loading') {
            text = mfp.st.tLoading;
          }

          var data = {
            status: status,
            text: text
          };
          // allows to modify status
          _mfpTrigger('UpdateStatus', data);

          status = data.status;
          text = data.text;

          mfp.preloader.html(text);

          mfp.preloader.find('a').on('click', function (e) {
            e.stopImmediatePropagation();
          });

          mfp.container.addClass('mfp-s-' + status);
          _prevStatus = status;
        }
      },

      /*
       "Private" helpers that aren't private at all
       */
      // Check to close popup or not
      // "target" is an element that was clicked
      _checkIfClose: function _checkIfClose(target) {

        if ($(target).hasClass(PREVENT_CLOSE_CLASS)) {
          return;
        }

        var closeOnContent = mfp.st.closeOnContentClick;
        var closeOnBg = mfp.st.closeOnBgClick;

        if (closeOnContent && closeOnBg) {
          return true;
        } else {

          // We close the popup if click is on close button or on preloader. Or if there is no content.
          if (!mfp.content || $(target).hasClass('mfp-close') || mfp.preloader && target === mfp.preloader[0]) {
            return true;
          }

          // if click is outside the content
          if (target !== mfp.content[0] && !$.contains(mfp.content[0], target)) {
            if (closeOnBg) {
              // last check, if the clicked element is in DOM, (in case it's removed onclick)
              if ($.contains(document, target)) {
                return true;
              }
            }
          } else if (closeOnContent) {
            return true;
          }
        }
        return false;
      },
      _addClassToMFP: function _addClassToMFP(cName) {
        mfp.bgOverlay.addClass(cName);
        mfp.wrap.addClass(cName);
      },
      _removeClassFromMFP: function _removeClassFromMFP(cName) {
        this.bgOverlay.removeClass(cName);
        mfp.wrap.removeClass(cName);
      },
      _hasScrollBar: function _hasScrollBar(winHeight) {
        return (mfp.isIE7 ? _document.height() : document.body.scrollHeight) > (winHeight || _window.height());
      },
      _setFocus: function _setFocus() {
        (mfp.st.focus ? mfp.content.find(mfp.st.focus).eq(0) : mfp.wrap).focus();
      },
      _onFocusIn: function _onFocusIn(e) {
        if (e.target !== mfp.wrap[0] && !$.contains(mfp.wrap[0], e.target)) {
          mfp._setFocus();
          return false;
        }
      },
      _parseMarkup: function _parseMarkup(template, values, item) {
        var arr;
        if (item.data) {
          values = $.extend(item.data, values);
        }
        _mfpTrigger(MARKUP_PARSE_EVENT, [template, values, item]);

        $.each(values, function (key, value) {
          if (value === undefined || value === false) {
            return true;
          }
          arr = key.split('_');
          if (arr.length > 1) {
            var el = template.find(EVENT_NS + '-' + arr[0]);

            if (el.length > 0) {
              var attr = arr[1];
              if (attr === 'replaceWith') {
                if (el[0] !== value[0]) {
                  el.replaceWith(value);
                }
              } else if (attr === 'img') {
                if (el.is('img')) {
                  el.attr('src', value);
                } else {
                  el.replaceWith('<img src="' + value + '" class="' + el.attr('class') + '" />');
                }
              } else {
                el.attr(arr[1], value);
              }
            }
          } else {
            template.find(EVENT_NS + '-' + key).html(value);
          }
        });
      },

      _getScrollbarSize: function _getScrollbarSize() {
        // thx David
        if (mfp.scrollbarSize === undefined) {
          var scrollDiv = document.createElement("div");
          scrollDiv.style.cssText = 'width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;';
          document.body.appendChild(scrollDiv);
          mfp.scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
          document.body.removeChild(scrollDiv);
        }
        return mfp.scrollbarSize;
      }

    }; /* MagnificPopup core prototype end */

    /**
     * Public static functions
     */
    $.magnificPopup = {
      instance: null,
      proto: MagnificPopup.prototype,
      modules: [],

      open: function open(options, index) {
        _checkInstance();

        if (!options) {
          options = {};
        } else {
          options = $.extend(true, {}, options);
        }

        options.isObj = true;
        options.index = index || 0;
        return this.instance.open(options);
      },

      close: function close() {
        return $.magnificPopup.instance && $.magnificPopup.instance.close();
      },

      registerModule: function registerModule(name, module) {
        if (module.options) {
          $.magnificPopup.defaults[name] = module.options;
        }
        $.extend(this.proto, module.proto);
        this.modules.push(name);
      },

      defaults: {

        // Info about options is in docs:
        // http://dimsemenov.com/plugins/magnific-popup/documentation.html#options

        disableOn: 0,

        key: null,

        midClick: false,

        mainClass: '',

        preloader: true,

        focus: '', // CSS selector of input to focus after popup is opened

        closeOnContentClick: false,

        closeOnBgClick: true,

        closeBtnInside: true,

        showCloseBtn: true,

        enableEscapeKey: true,

        modal: false,

        alignTop: false,

        removalDelay: 0,

        prependTo: null,

        fixedContentPos: 'auto',

        fixedBgPos: 'auto',

        overflowY: 'auto',

        closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>',

        tClose: 'Close (Esc)',

        tLoading: 'Loading...'

      }
    };

    $.fn.magnificPopup = function (options) {
      _checkInstance();

      var jqEl = $(this);

      // We call some API method of first param is a string
      if (typeof options === "string") {

        if (options === 'open') {
          var items,
              itemOpts = _isJQ ? jqEl.data('magnificPopup') : jqEl[0].magnificPopup,
              index = parseInt(arguments[1], 10) || 0;

          if (itemOpts.items) {
            items = itemOpts.items[index];
          } else {
            items = jqEl;
            if (itemOpts.delegate) {
              items = items.find(itemOpts.delegate);
            }
            items = items.eq(index);
          }
          mfp._openClick({ mfpEl: items }, jqEl, itemOpts);
        } else {
          if (mfp.isOpen) mfp[options].apply(mfp, Array.prototype.slice.call(arguments, 1));
        }
      } else {
        // clone options obj
        options = $.extend(true, {}, options);

        /*
         * As Zepto doesn't support .data() method for objects
         * and it works only in normal browsers
         * we assign "options" object directly to the DOM element. FTW!
         */
        if (_isJQ) {
          jqEl.data('magnificPopup', options);
        } else {
          jqEl[0].magnificPopup = options;
        }

        mfp.addGroup(jqEl, options);
      }
      return jqEl;
    };

    //Quick benchmark
    /*
     var start = performance.now(),
     i,
     rounds = 1000;

     for(i = 0; i < rounds; i++) {

     }
     console.log('Test #1:', performance.now() - start);

     start = performance.now();
     for(i = 0; i < rounds; i++) {

     }
     console.log('Test #2:', performance.now() - start);
     */

    /*>>core*/

    /*>>inline*/

    var INLINE_NS = 'inline',
        _hiddenClass,
        _inlinePlaceholder,
        _lastInlineElement,
        _putInlineElementsBack = function _putInlineElementsBack() {
          if (_lastInlineElement) {
            _inlinePlaceholder.after(_lastInlineElement.addClass(_hiddenClass)).detach();
            _lastInlineElement = null;
          }
        };

    $.magnificPopup.registerModule(INLINE_NS, {
      options: {
        hiddenClass: 'hide', // will be appended with `mfp-` prefix
        markup: '',
        tNotFound: 'Content not found'
      },
      proto: {

        initInline: function initInline() {
          mfp.types.push(INLINE_NS);

          _mfpOn(CLOSE_EVENT + '.' + INLINE_NS, function () {
            _putInlineElementsBack();
          });
        },

        getInline: function getInline(item, template) {

          _putInlineElementsBack();

          if (item.src) {
            var inlineSt = mfp.st.inline,
                el = $(item.src);

            if (el.length) {

              // If target element has parent - we replace it with placeholder and put it back after popup is closed
              var parent = el[0].parentNode;
              if (parent && parent.tagName) {
                if (!_inlinePlaceholder) {
                  _hiddenClass = inlineSt.hiddenClass;
                  _inlinePlaceholder = _getEl(_hiddenClass);
                  _hiddenClass = 'mfp-' + _hiddenClass;
                }
                // replace target inline element with placeholder
                _lastInlineElement = el.after(_inlinePlaceholder).detach().removeClass(_hiddenClass);
              }

              mfp.updateStatus('ready');
            } else {
              mfp.updateStatus('error', inlineSt.tNotFound);
              el = $('<div>');
            }

            item.inlineElement = el;
            return el;
          }

          mfp.updateStatus('ready');
          mfp._parseMarkup(template, {}, item);
          return template;
        }
      }
    });

    /*>>inline*/

    /*>>ajax*/
    var AJAX_NS = 'ajax',
        _ajaxCur,
        _removeAjaxCursor = function _removeAjaxCursor() {
          if (_ajaxCur) {
            $(document.body).removeClass(_ajaxCur);
          }
        },
        _destroyAjaxRequest = function _destroyAjaxRequest() {
          _removeAjaxCursor();
          if (mfp.req) {
            mfp.req.abort();
          }
        };

    $.magnificPopup.registerModule(AJAX_NS, {

      options: {
        settings: null,
        cursor: 'mfp-ajax-cur',
        tError: '<a href="%url%">The content</a> could not be loaded.'
      },

      proto: {
        initAjax: function initAjax() {
          mfp.types.push(AJAX_NS);
          _ajaxCur = mfp.st.ajax.cursor;

          _mfpOn(CLOSE_EVENT + '.' + AJAX_NS, _destroyAjaxRequest);
          _mfpOn('BeforeChange.' + AJAX_NS, _destroyAjaxRequest);
        },
        getAjax: function getAjax(item) {

          if (_ajaxCur) {
            $(document.body).addClass(_ajaxCur);
          }

          mfp.updateStatus('loading');

          var opts = $.extend({
            url: item.src,
            success: function success(data, textStatus, jqXHR) {
              var temp = {
                data: data,
                xhr: jqXHR
              };

              _mfpTrigger('ParseAjax', temp);

              mfp.appendContent($(temp.data), AJAX_NS);

              item.finished = true;

              _removeAjaxCursor();

              mfp._setFocus();

              setTimeout(function () {
                mfp.wrap.addClass(READY_CLASS);
              }, 16);

              mfp.updateStatus('ready');

              _mfpTrigger('AjaxContentAdded');
            },
            error: function error() {
              _removeAjaxCursor();
              item.finished = item.loadError = true;
              mfp.updateStatus('error', mfp.st.ajax.tError.replace('%url%', item.src));
            }
          }, mfp.st.ajax.settings);

          mfp.req = $.ajax(opts);

          return '';
        }
      }
    });

    /*>>ajax*/

    /*>>zoom*/
    var hasMozTransform,
        getHasMozTransform = function getHasMozTransform() {
          if (hasMozTransform === undefined) {
            hasMozTransform = document.createElement('p').style.MozTransform !== undefined;
          }
          return hasMozTransform;
        };

    $.magnificPopup.registerModule('zoom', {

      options: {
        enabled: false,
        easing: 'ease-in-out',
        duration: 300,
        opener: function opener(element) {
          return element.is('img') ? element : element.find('img');
        }
      },

      proto: {

        initZoom: function initZoom() {
          var zoomSt = mfp.st.zoom,
              ns = '.zoom',
              image;

          if (!zoomSt.enabled || !mfp.supportsTransition) {
            return;
          }

          var duration = zoomSt.duration,
              getElToAnimate = function getElToAnimate(image) {
                var newImg = image.clone().removeAttr('style').removeAttr('class').addClass('mfp-animated-image'),
                    transition = 'all ' + zoomSt.duration / 1000 + 's ' + zoomSt.easing,
                    cssObj = {
                      position: 'fixed',
                      zIndex: 9999,
                      left: 0,
                      top: 0,
                      '-webkit-backface-visibility': 'hidden'
                    },
                    t = 'transition';

                cssObj['-webkit-' + t] = cssObj['-moz-' + t] = cssObj['-o-' + t] = cssObj[t] = transition;

                newImg.css(cssObj);
                return newImg;
              },
              showMainContent = function showMainContent() {
                mfp.content.css('visibility', 'visible');
              },
              openTimeout,
              animatedImg;

          _mfpOn('BuildControls' + ns, function () {
            if (mfp._allowZoom()) {

              clearTimeout(openTimeout);
              mfp.content.css('visibility', 'hidden');

              // Basically, all code below does is clones existing image, puts in on top of the current one and animated it

              image = mfp._getItemToZoom();

              if (!image) {
                showMainContent();
                return;
              }

              animatedImg = getElToAnimate(image);

              animatedImg.css(mfp._getOffset());

              mfp.wrap.append(animatedImg);

              openTimeout = setTimeout(function () {
                animatedImg.css(mfp._getOffset(true));
                openTimeout = setTimeout(function () {

                  showMainContent();

                  setTimeout(function () {
                    animatedImg.remove();
                    image = animatedImg = null;
                    _mfpTrigger('ZoomAnimationEnded');
                  }, 16); // avoid blink when switching images
                }, duration); // this timeout equals animation duration
              }, 16); // by adding this timeout we avoid short glitch at the beginning of animation

              // Lots of timeouts...
            }
          });
          _mfpOn(BEFORE_CLOSE_EVENT + ns, function () {
            if (mfp._allowZoom()) {

              clearTimeout(openTimeout);

              mfp.st.removalDelay = duration;

              if (!image) {
                image = mfp._getItemToZoom();
                if (!image) {
                  return;
                }
                animatedImg = getElToAnimate(image);
              }

              animatedImg.css(mfp._getOffset(true));
              mfp.wrap.append(animatedImg);
              mfp.content.css('visibility', 'hidden');

              setTimeout(function () {
                animatedImg.css(mfp._getOffset());
              }, 16);
            }
          });

          _mfpOn(CLOSE_EVENT + ns, function () {
            if (mfp._allowZoom()) {
              showMainContent();
              if (animatedImg) {
                animatedImg.remove();
              }
              image = null;
            }
          });
        },

        _allowZoom: function _allowZoom() {
          return mfp.currItem.type === 'image';
        },

        _getItemToZoom: function _getItemToZoom() {
          if (mfp.currItem.hasSize) {
            return mfp.currItem.img;
          } else {
            return false;
          }
        },

        // Get element postion relative to viewport
        _getOffset: function _getOffset(isLarge) {
          var el;
          if (isLarge) {
            el = mfp.currItem.img;
          } else {
            el = mfp.st.zoom.opener(mfp.currItem.el || mfp.currItem);
          }

          var offset = el.offset();
          var paddingTop = parseInt(el.css('padding-top'), 10);
          var paddingBottom = parseInt(el.css('padding-bottom'), 10);
          offset.top -= $(window).scrollTop() - paddingTop;

          /*
           Animating left + top + width/height looks glitchy in Firefox, but perfect in Chrome. And vice-versa.
           */
          var obj = {
            width: el.width(),
            // fix Zepto height+padding issue
            height: (_isJQ ? el.innerHeight() : el[0].offsetHeight) - paddingBottom - paddingTop
          };

          // I hate to do this, but there is no another option
          if (getHasMozTransform()) {
            obj['-moz-transform'] = obj['transform'] = 'translate(' + offset.left + 'px,' + offset.top + 'px)';
          } else {
            obj.left = offset.left;
            obj.top = offset.top;
          }
          return obj;
        }

      }
    });

    /*>>zoom*/

    _checkInstance();
  });

  (function ($, sr) {

    // debouncing function from John Hann
    // http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/
    var debounce = function debounce(func, threshold, execAsap) {
      var timeout;

      return function debounced() {
        var obj = this,
            args = arguments;
        function delayed() {
          if (!execAsap) func.apply(obj, args);
          timeout = null;
        };

        if (timeout) clearTimeout(timeout);else if (execAsap) func.apply(obj, args);

        timeout = setTimeout(delayed, threshold || 100);
      };
    };
    // smartresize
    jQuery.fn[sr] = function (fn) {
      return fn ? this.bind('resize', debounce(fn)) : this.trigger(sr);
    };
  })(jQuery, 'smartresize');

  /* usage:

   $(window).smartresize(function(){
   // code that takes it easy...
   });

   */

  App.Module.AreaGraph = (function () {

    var self = {};
    var module = { chart: {} };

    // -----
    // Constants
    // -----

    var MAX_WIDTH = 200;
    var MARGIN = 30;
    var POINT_RADIUS = 6;

    var GRADIENT_START = '#0096c4';
    var GRADIENT_END = '#78cbe4';

    // -----
    // Utils
    // -----

    var d3ParseDate = d3.time.format('%m-%d-%Y').parse;
    var d3BisectDate = d3.bisector(function (d) {
      return d3ParseDate(d.date);
    }).left;

    var hideAll = function hideAll() {
      var arr = arguments.length <= 0 || arguments[0] === undefined ? array() : arguments[0];

      for (var _i = 0; _i < arr.length; _i++) {
        arr[_i].style('opacity', 0);
      }
    };

    // -----
    // Draw
    // -----

    var draw = {
      canvas: function canvas($chart) {
        var width = $chart.width();

        module.chart.$canvas = d3.select($chart.get(0)).append('svg');
        module.chart.$inner = module.chart.$canvas.append('g');

        module.chart.$canvas.attr('class', 'areaGraph__canvas');
        module.chart.$inner.attr('class', 'areaGraph__canvas__inner');

        module.chart.width = width;
        module.chart.height = module.chart.width * .315;

        // Set width/height of the canvas
        module.chart.$canvas.attr('width', '100%').attr('height', module.chart.height);
      },
      xAxis: function xAxis(data) {
        module.chart.x = d3.time.scale();
        module.chart.$xAxis = module.chart.$canvas.append('g');

        module.chart.x.range([0, module.chart.width]);
        module.chart.x.domain(d3.extent(data, function (d) {
          return d3ParseDate(d.date);
        }));

        module.chart.$xAxis.attr('class', 'areaGraph__xAxis');
      },
      yAxis: function yAxis(data) {
        module.chart.y = d3.scale.linear();

        module.chart.y.range([module.chart.height, 0]);
        module.chart.y.domain([-30, d3.max(data, function (d) {
          return d.data + d.data * 0.33;
        })]);
      },
      xPoints: function xPoints(data) {
        for (var _i2 = 0; _i2 < data.length; _i2++) {
          if (_i2 === 0 || _i2 === data.length - 1) continue;

          module.chart.$xAxis.append('text').attr({
            'x': module.chart.x(d3ParseDate(data[_i2].date)),
            'y': module.chart.height - MARGIN,
            'text-anchor': 'middle',
            'fill': '#ffffff',
            'class': 'areaGraph__xAxis__label'
          }).text(moment(data[_i2].date).format('M/D/YYYY'));

          module.chart.$xAxis.append('rect').attr({
            'class': 'areaGraph__notch',
            x: module.chart.x(d3ParseDate(data[_i2].date)) - 2,
            y: module.chart.height - MARGIN - 40,
            width: 3,
            height: 15
          });
        }
      },
      xLine: function xLine() {
        module.chart.$xLine = module.chart.$xAxis.append('line');

        module.chart.$xLine.attr('class', 'areaGraph__xAxis__line');

        module.chart.$xLine.attr('x2', module.chart.width);
        module.chart.$xLine.attr('y1', module.chart.height - MARGIN - 20);
        module.chart.$xLine.attr('y2', module.chart.height - MARGIN - 20);
      },
      area: function area(data) {
        var altStyle = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

        var area = d3.svg.area();

        area.x(function (d) {
          return module.chart.x(d3ParseDate(d.date));
        });
        area.y0(module.chart.height);
        area.y1(function (d) {
          return module.chart.y(d.data);
        });

        module.chart.$area = module.chart.$inner.append('path');
        module.chart.$area.attr('class', 'areaGraph__area' + (altStyle ? '--alt' : ''));

        module.chart.$area.datum(data);
        module.chart.$area.attr('d', area);
      },
      linePoints: function linePoints(data) {
        module.chart.$pointGroup = module.chart.$pointGroup || [];
        module.chart.$points = module.chart.$points || [];

        var pointGroup = [];

        var $group = undefined;
        var $point = undefined;
        var $pg = undefined;
        var $bar = undefined;
        var $tooltip = undefined;

        $pg = module.chart.$inner.append('g');
        $pg.attr('class', 'areaGraph__pointGroup');

        var _loop = function (_i3) {
          if (!data.hasOwnProperty(_i3)) return 'continue';

          // Append the point contianer

          $group = $pg.append('g');
          $group.attr('class', 'areaGraph__point');

          // Append the point (circle)

          $point = $group.append('circle');

          $point.attr('class', 'areaGraph__point__circle');
          $point.attr('cx', function (d) {
            return module.chart.x(d3ParseDate(data[_i3].date));
          });
          $point.attr('cy', function (d) {
            return module.chart.y(data[_i3].data);
          });
          $point.attr('r', POINT_RADIUS);

          // Append the bar

          $bar = $group.append('line');

          $bar.attr('class', 'areaGraph__point__bar');
          $bar.attr('x1', function (d) {
            return module.chart.x(d3ParseDate(data[_i3].date));
          });
          $bar.attr('x2', function (d) {
            return module.chart.x(d3ParseDate(data[_i3].date));
          });
          $bar.attr('y1', function (d) {
            return module.chart.height;
          });
          $bar.attr('y2', function (d) {
            return module.chart.y(data[_i3].data) + 6;
          });

          // Append the tooltip

          $tooltip = $group.append('text');

          $tooltip.attr('class', 'areaGraph__point__text');
          $tooltip.attr('transform', function (d) {
            return 'translate(' + module.chart.x(d3ParseDate(data[_i3].date)) + ',' + module.chart.y(data[_i3].data) + ')';
          });
          $tooltip.attr({ dx: '.55em', dy: '.55em' });
          $tooltip.text(function (d) {
            return '+ ' + data[_i3].data;
          });

          // Add this group to the main group array

          module.chart.$points.push($group);
          pointGroup.push($group);
        };

        for (var _i3 in data) {
          var _ret = _loop(_i3);

          if (_ret === 'continue') continue;
        }

        module.chart.$pointGroup.push(pointGroup);
      },
      gradients: function gradients() {
        module.chart.$gradients = module.chart.$canvas.append('g');
        module.chart.$gradient1 = module.chart.$gradients.append('linearGradient');

        module.chart.$gradients.attr('class', 'areaGraph__gradients');

        // White Gradient

        module.chart.$gradient1.attr('id', 'areaGraph__gradient');
        module.chart.$gradient1.attr('gradientUnits', 'userSpaceOnUse');

        module.chart.$gradient1.append('stop').attr('offset', '0').attr('stop-color', GRADIENT_START);

        module.chart.$gradient1.append('stop').attr('offset', '0.5').attr('stop-color', GRADIENT_END);
      },
      mouseEvents: function mouseEvents(data) {
        module.chart.$inner.on('mousemove', function () {
          var x0 = module.chart.x.invert(d3.mouse(this)[0]);
          var i = d3BisectDate(data, x0);

          var $point1 = module.chart.$pointGroup[0][i];
          var $point2 = module.chart.$pointGroup[1][i];

          hideAll(module.chart.$points);

          $point1.style('opacity', 1);
          $point2.style('opacity', 1);
        });

        module.chart.$inner.on('mouseleave', function () {
          return hideAll(module.chart.$points);
        });
      }
    };

    var drawChart = function drawChart($chart, data) {
      if (module.chart.$canvas) {
        module.chart.$canvas.remove();
      }

      draw.canvas($chart);
      draw.gradients();

      if (data[0]) {
        draw.xAxis(data[0]);
        draw.yAxis(data[0]);
        draw.xPoints(data[0]);

        draw.area(data[0]);
        draw.linePoints(data[0]);
        draw.mouseEvents(data[0]);
      }

      if (data[1]) {
        draw.area(data[1], true);
        draw.linePoints(data[1]);
        draw.mouseEvents(data[1]);
      }
    };

    // -----
    // Public Methods
    // -----

    self.init = function ($chart, data) {
      drawChart($chart, data);
      $(window).on('resize', function () {
        return drawChart($chart, data);
      });
    };

    return self;
  })();

  App.Module.BubbleGraph = (function () {

    self.jsonData = {
      "name": "zackSpear",
      "children": [{ "name": "Java", "size": 5001 }, { "name": "DevOps", "size": 4001 }, { "name": "MongoDB", "size": 3001 }, { "name": "MySQL", "size": 2001 }, { "name": "Angular", "size": 1000 }]
    };

    self.bubbleContainer = '.js-graph--bubble', self.bubbleContainerWidth = $(self.bubbleContainer).width(), self.format = d3.format(",d"), self.svg, self.innerContainer, self.innerContainerHeight, self.bubble;

    self.colors = {
      blue: '#009ccc',
      green: '#21bd58',
      orange: '#e3c363',
      turquoise: '#57e5dd',
      pink: '#ec6fc2'
    };

    self.determineColor = function (size) {
      if (size >= 5000) return self.colors.blue;else if (size >= 4000) return self.colors.green;else if (size >= 3000) return self.colors.orange;else if (size >= 2000) return self.colors.turquoise;else return self.colors.pink;
    };

    // Returns a flattened hierarchy containing all leaf nodes under the root.
    self.classes = function (root) {
      var classes = [];

      function recurse(name, node) {
        if (node.children) node.children.forEach(function (child) {
          recurse(node.name, child);
        });else classes.push({ packageName: name, className: node.name, value: node.size });
      }

      recurse(null, root);
      return { children: classes };
    };

    self.createSvg = function () {
      self.svg = d3.select(self.bubbleContainer).append("svg").attr("viewBox", "0 0 " + self.bubbleContainerWidth + " " + self.bubbleContainerWidth).attr("perserveAspectRatio", "none").attr("width", self.bubbleContainerWidth).attr("class", "bubble");

      self.innerContainer = self.svg.append("g").attr("class", "inner-bubble");
    };

    self.createBubble = function () {
      self.bubble = d3.layout.pack().sort(null).size([self.bubbleContainerWidth, self.bubbleContainerWidth]);
    };

    self.drawNodes = function (data) {
      var node = self.innerContainer.selectAll(".node").data(self.bubble.nodes(self.classes(self.jsonData)).filter(function (d) {
        return !d.children;
      })).enter().append("g").attr("class", "node").attr("transform", function (d) {
        return "translate(" + d.x + "," + d.y + ")";
      });

      node.append("title").text(function (d) {
        return d.className + ": " + self.format(d.value);
      });

      node.append("circle").attr("r", function (d) {
        return d.r;
      }).style("fill", function (d) {
        return self.determineColor(d.value);
      });

      node.append("text").attr("dy", ".3em").style('font-size', '1.25em').style("text-anchor", "middle").style("fill", "#ffffff").text(function (d) {
        return d.className.substring(0, d.r / 3);
      });
    };

    // -----
    // Public Methods
    // -----

    self.init = function () {
      self.createSvg();
      self.createBubble();
      self.drawNodes();

      var nodeHeights = $('.inner-bubble').outerHeight(),
          $chart = $(".bubble"),
          $container = $chart.parent(),
          aspect = $chart.width() / $chart.height();

      self.innerContainerHeight = $('.inner-bubble')[0].getBBox().height;

      // $chart.css('height', self.innerContainerHeight);

      $(window).on("resize", function () {
        var targetWidth = $container.width();

        $chart.attr("width", targetWidth);
        $chart.attr("height", Math.round(targetWidth / aspect));
      }).trigger("resize");
    };

    // (function() {
    //   self.init();
    // })();

    return self;
  })();

  App.Module.CircleGraph = (function () {

    var self = {};
    var module = { chart: {} };

    // -----
    // Constants
    // -----

    var MAX_WIDTH = 200;

    // -----
    // Draw
    // -----

    var draw = {
      canvas: function canvas($element) {
        var height = width;
        var canvas = d3.select($element.get(0)).append('svg').attr('class', 'circleGraph__canvas');
        var inner = canvas.append('g').attr('class', 'circleGraph__canvas__inner');
        var width = $element.width();

        module.chart._size = width > MAX_WIDTH ? MAX_WIDTH : width;

        // Set width/height of the canvas
        canvas.attr('width', module.chart._size).attr('height', module.chart._size);

        // Set width/height of inner container
        inner.attr('transform', 'translate(' + module.chart._size / 2 + ',' + module.chart._size / 2 + ')');

        return canvas;
      },
      meter: function meter(Canvas) {
        var meter = Canvas.select('.circleGraph__canvas__inner').append('g').attr('class', 'circleGraph__meter');
        var circle = meter.append('circle').attr('class', 'circleGraph__circle');

        circle.attr({
          'cx': '0',
          'cy': '0',
          'r': '50%'
        });

        return meter;
      },
      progress: function progress(Meter) {
        var progress = Meter.append('path').attr('class', 'circleGraph__progress');
        var twoPi = 2 * Math.PI;
        var arc = d3.svg.arc().startAngle(0).innerRadius(module.chart._size / 2).outerRadius(module.chart._size / 2);

        return progress;
      },
      text: function text(Meter) {
        var text = Meter.append('text').attr('class', 'circleGraph__text');

        text.attr({
          'text-anchor': 'middle',
          'dy': '.35em'
        });

        return text;
      }
    };

    var drawChart = function drawChart($chart, data) {
      if (module.chart.canvas) {
        module.chart.canvas.remove();
      }

      module.chart.canvas = draw.canvas($chart);
      module.chart.meter = draw.meter(module.chart.canvas);
      module.chart.progress = draw.progress(module.chart.meter);
      module.chart.text = draw.text(module.chart.meter);

      displayData(data);
    };

    var displayData = function displayData() {
      var percentage = arguments.length <= 0 || arguments[0] === undefined ? 0 : arguments[0];

      var twoPi = 2 * Math.PI;
      var arc = d3.svg.arc().startAngle(0).innerRadius(module.chart._size / 2).outerRadius(module.chart._size / 2);

      module.chart.text.text(d3.format('.0%')((percentage / 100).toString()));
      module.chart.progress.attr('d', arc.endAngle(twoPi * (percentage / 100) * -1));
    };

    // -----
    // Public Methods
    // -----

    self.init = function ($chart, data) {
      drawChart($chart, data);
      $(window).on('resize', function () {
        return drawChart($chart, data);
      });
    };

    return self;
  })();

  App.Module.CreatePipeline = (function () {

    var self = {};

    self.$revealElementsTrigger = $('.js-revealPipelineFields--trigger');

    /* ----- Displays the hidden target element by adding the .is--active class ----- */
    self.displayPipelineFields = function (target) {
      var $target = $('.' + target);
      $target.addClass('is--active');
    };

    self.init = function () {
      self.$revealElementsTrigger.on('click', function (e) {
        e.preventDefault();

        /* ----- Update button text ----- */
        $(this).html('Save as Pipeline');

        /* ----- Feed self.displayPipelineFields the target class name ----- */
        var revealTarget = $(this).data('target');
        self.displayPipelineFields(revealTarget);
      });
    };

    (function () {
      self.init();
    })();

    return self;
  })();

  App.Module.CreateSmartList = (function () {

    var self = {};

    self.$revealElementsTrigger = $('.js-revealSmartListFields--trigger');

    /* ----- Displays the hidden target element by adding the .is--active class ----- */
    self.displaySmartListFields = function (target) {
      var $target = $('.' + target);
      $target.addClass('is--active');
    };

    self.init = function () {
      self.$revealElementsTrigger.on('click', function (e) {
        e.preventDefault();

        /* ----- Update button text ----- */
        $(this).html('Save as Smart List');

        /* ----- Feed self.displaySmartListFields the target class name ----- */
        var revealTarget = $(this).data('target');
        self.displaySmartListFields(revealTarget);
      });
    };

    (function () {
      self.init();
    })();

    return self;
  })();

  App.Module.Feed = (function () {

    var self = {};

    self.$el = {
      feed: $('.feed'),
      feedInner: $('.feed__inner')
    };

    self.open = function () {
      setTimeout(function () {
        return self.$el.feed.addClass('view__sidebar--active');
      });
      setTimeout(function () {
        return self.$el.feedInner.addClass('feed__inner--active');
      }, 200);
    };

    self.close = function () {
      setTimeout(function () {
        return self.$el.feedInner.removeClass('feed__inner--active');
      });
      setTimeout(function () {
        return self.$el.feed.removeClass('view__sidebar--active');
      });
    };

    return self;
  })();

// -------------------------------------
//   File Browser
//   ->
// -------------------------------------
  App.Module.fileBrowser = (function () {

    var self = {};

    self.$formField = $('.js-inputFile');

    self.updatePath = function (input, filename) {
      input.children('span').attr('data-placeholder', filename);
    };

    self.init = function () {
      /* ----- Check each input to see if it has a value ----- */
      self.$formField.on('change', function (e) {
        var uploadedFilename = e.target.files[0].name;
        self.updatePath($(this), uploadedFilename);
      });
    };

    (function () {
      self.init();
    })();

    return self;
  })();

// -------------------------------------
//   Float Labels
//   -> If an input has a label, then check to see if it has a value.
//      If so, then float the label above the input
// -------------------------------------
  App.Module.floatLabels = (function () {

    var self = {};

    self.$formField = $('.js-floatLabel');

    self.checkInput = function (input) {
      if (input.val()) {
        input.parents('.form__col, .form__col--stacked').addClass('form__col--has-value');
      } else {
        input.parents('.form__col, .form__col--stacked').removeClass('form__col--has-value');
      }
    };

    self.init = function () {
      /* ----- Check each input to see if it has a value ----- */
      self.$formField.on('keyup change', function () {
        self.checkInput($(this));
      });

      /* ----- On load check each input to see if it already has a value----- */
      self.$formField.each(function () {
        self.checkInput($(this));
      });
    };

    (function () {
      self.init();
    })();

    return self;
  })();

  App.Module.DatePicker = (function () {

    // Date Selector
    var $dateField = $('.js-datePicker'),
        $dateFieldShortFormat = $('.js-datePicker--shortFormat'),
        $timeField = $('.js-timePicker'),
        currentDate = new Date(),
        day = currentDate.getDate(),
        month = currentDate.getMonth(),
        year = currentDate.getFullYear();

    /* ----- Add a zero in front of the day if less than 10 ----- */
    if (day < 10) day = '0' + day;

    /* ----- Add a zero in front of the month if less than 10 ----- */
    if (month < 10) month = '0' + month;

    /* ----- Add a minimum to the date selector so the user
     can't have something selected before the current date ----- */
    if ($dateField.length) {
      $dateField.pickadate({
        today: '',
        format: 'mmmm dd, yyyy',
        min: new Date(year, month, day)
      });
    }

    if ($dateFieldShortFormat.length) {
      $dateFieldShortFormat.pickadate({
        today: '',
        format: 'mm/dd/yy',
        min: new Date(year, month, day)
      });
    }

    if ($timeField.length) $timeField.pickatime();
  })();

  App.Module.FancySelect = (function () {

    var initFancySelect = $('.js-fancy').fancySelect().on('change.fs', function () {
      App.Module.floatLabels.checkInput($(this));
    });
  })();

  App.Module.TagsInput = (function () {

    // Doing it this way allows for the defaultText to be set on a per input basis
    $('.js-tagsInput').each(function () {
      $(this).tagsInput({
        'defaultText': $(this).attr('placeholder'),
        'height': 'auto',
        'width': '100%',
        'onChange': function onChange() {
          floatLabels.checkInput($(this));
        }
      });
    });
  })();

  App.Module.LineGraph = (function () {

    var self = {};
    var module = { chart: {} };

    // -----
    // Constants
    // -----

    var MAX_WIDTH = 200;
    var MARGIN = 30;
    var POINT_RADIUS = 6;

    // -----
    // Utils
    // -----

    var d3ParseDate = d3.time.format('%m-%d-%Y').parse;

    // -----
    // Private Functions
    // -----

    var showPoint = function showPoint(d) {
      var $point = d3.select(this);

      $point.attr('r', POINT_RADIUS * 1.05);
      $point.attr('stroke-width', POINT_RADIUS);
    };

    var draw = {
      canvas: function canvas($chart) {
        var width = $chart.width();

        module.chart.$canvas = d3.select($chart.get(0)).append('svg');
        module.chart.$inner = module.chart.$canvas.append('g');

        module.chart.$canvas.attr('class', 'lineGraph__canvas');
        module.chart.$inner.attr('class', 'lineGraph__canvas__inner');

        module.chart.width = width - MARGIN * 2;
        module.chart.height = module.chart.width * .75;

        // Enforce max height
        if (module.chart.height > 175) module.chart.height = 175;

        // Set width/height of the canvas
        module.chart.$canvas.attr('width', module.chart.width).attr('height', module.chart.height);
      },
      xAxis: function xAxis(data) {
        module.chart.x = d3.time.scale();
        module.chart.$xAxis = module.chart.$canvas.append('g');

        module.chart.x.range([0, module.chart.width]);
        module.chart.x.domain(d3.extent(data, function (d) {
          return d3ParseDate(d.date);
        }));

        module.chart.$xAxis.attr('class', 'lineGraph__xAxis');
      },
      yAxis: function yAxis(data) {
        module.chart.y = d3.scale.linear();

        module.chart.y.range([module.chart.height, 0]);
        module.chart.y.domain([0, d3.max(data, function (d) {
          return d.data + d.data * 0.33;
        })]);
      },
      xPoints: function xPoints(data) {
        var tickScale = module.chart.size / data.length;

        for (var _i4 in data) {
          if (!data.hasOwnProperty(_i4) || _i4 % 2 !== 1) continue;

          module.chart.$xAxis.append('text').attr({
            'x': module.chart.x(d3ParseDate(data[_i4].date)),
            'y': module.chart.height - MARGIN,
            'text-anchor': 'middle',
            'fill': '#bfbfbf'
          }).text(moment(data[_i4].date).format('D')).style('font-size', '.9em');
        }
      },
      xLine: function xLine() {
        module.chart.$xLine = module.chart.$xAxis.append('line');

        module.chart.$xLine.attr('class', 'lineGraph__xAxis__line');

        module.chart.$xLine.attr('x2', module.chart.width);
        module.chart.$xLine.attr('y1', module.chart.height - MARGIN - 20);
        module.chart.$xLine.attr('y2', module.chart.height - MARGIN - 20);
      },
      line: function line(data) {
        var lineStart = d3.svg.line();
        var lineEnd = d3.svg.line();

        lineStart.x(function (d) {
          return module.chart.x(d3ParseDate(d.date));
        });
        lineStart.y(function (d) {
          return module.chart.y(0);
        });

        lineEnd.x(function (d) {
          return module.chart.x(d3ParseDate(d.date));
        });
        lineEnd.y(function (d) {
          return module.chart.y(d.data);
        });

        module.chart.$line = module.chart.$inner.append('path');

        module.chart.$line.attr('class', 'lineGraph__line');

        module.chart.$line.attr('d', lineStart(data));
        module.chart.$line.transition().duration(500);
        module.chart.$line.attr('d', lineEnd(data));
      },
      linePoints: function linePoints(data) {
        module.chart.$pointGroup = module.chart.$inner.append('g');
        module.chart.$points = module.chart.$pointGroup.selectAll('circle').data(data).enter().append('circle');

        module.chart.$pointGroup.attr('class', 'lineGraph__pointGroup');

        module.chart.$points.attr('class', 'lineGraph__point');
        module.chart.$points.attr('cx', function (d) {
          return module.chart.x(d3ParseDate(d.date));
        });
        module.chart.$points.attr('cy', function (d) {
          return module.chart.y(0);
        });
        module.chart.$points.attr('cy', function (d) {
          return module.chart.y(d.data);
        });
        module.chart.$points.attr('r', POINT_RADIUS);

        module.chart.$points.on('mouseover', showPoint);
      },
      lineMarker: function lineMarker() {
        module.chart.$lineBar = module.chart.$inner.append('line');

        module.chart.$lineBar.attr('class', 'lineGraph__marker');
      }
    };

    var drawChart = function drawChart($chart, data) {
      if (module.chart.$canvas) {
        module.chart.$canvas.remove();
      }

      draw.canvas($chart);
      draw.xAxis(data);
      draw.yAxis(data);
      draw.xLine();
      draw.xPoints(data);
      draw.line(data);
      draw.linePoints(data);
    };

    // -----
    // Public Methods
    // -----

    self.init = function ($chart, data) {
      drawChart($chart, data);
      $(window).on('resize', function () {
        return drawChart($chart, data);
      });
    };

    return self;
  })();

  App.Module.Modal = (function () {

    var self = {};

    self.modalTrigger = '.js-modal--trigger', self.closeModalTrigger = '.js-modalClose--trigger';

    // -------------------------------------
    //   For the sake of example, this is the content inside the modal.
    //   You just need to feed the self.displayModal function some HTML.
    // -------------------------------------
    self.temporaryModalContent = '<div class="box__header">' + '<h2 class="red bold mt0 mb0">' + 'In modern times some scabrous afternoons' + '</h2>' + '<h3 class="mt1 mb0">' + '03/23/2015' + '</h3>' + '</div>' + '<div class="col--12">' + '<p>A fatless ellipse without balances is truly a edge of nudist skates. If this was somewhat unclear, a tile is an intoned wine.</p>' + '</div>';

    self.displayModal = function (modalContent) {
      $.magnificPopup.open({
        items: {
          src: '<div class="content-modal center mfp-with-anim"><div class="box">' + modalContent + '</div></div>',
          type: 'inline'
        },
        closeBtnInside: true,
        fixedContentPos: true,
        fixedBgPos: true,
        mainClass: 'mfp-move-horizontal',
        midClick: true,
        overflowY: 'auto',
        preloader: false,
        removalDelay: 300
      });
    };

    self.init = function () {
      /* ----- For the sake of example ----- */
      $(document).on('click', self.modalTrigger, function (event) {
        event.preventDefault();
        self.displayModal(self.temporaryModalContent);
      });

      $(document).on('click', self.closeModalTrigger, function (event) {
        event.preventDefault();
        $.magnificPopup.close();
      });
    };

    (function () {
      self.init();
    })();

    return self;
  })();

  App.Module.Navigation = (function () {

    var self = {};

    self.navParent = $('.js--nav'), self.navItem = $('.js--navItem');

    var navClickout = function navClickout(e) {
      if (!!$(e.target).parents('.view__sidebar').length || $(e.target).is('.view__sidebar')) return;

      return closeNav();
    };

    // -----
    // Helpers
    // -----

    var closeNav = function closeNav() {
      var $activeItem = $('.view__sidebar__navItem--active');
      var $activeMenu = $('.view__sidebar__subNav--active');

      navItem.deactivate($activeItem);
      parentMenu.close(self.navParent);
      subMenu.close($activeMenu);

      $('body').unbind('click.clickout');
    };

    // -----
    // Nav Link
    // -----

    var navItem = {
      activate: function activate($navItem) {
        navItem.deactivate($('.view__sidebar__navItem--active'));

        $navItem.removeClass('view__sidebar__navItem').addClass('view__sidebar__navItem--active');
      },
      deactivate: function deactivate($navItem) {
        $navItem.removeClass('view__sidebar__navItem--active').addClass('view__sidebar__navItem');
      }
    };

    // -----
    // Parent Menu
    // -----

    var parentMenu = {
      open: function open($navParent) {
        $navParent.removeClass('view__sidebar__navParent').addClass('view__sidebar__navParent--active');

        setTimeout(function () {
          return $('body').on('click.clickout', navClickout);
        });
      },
      close: function close($navParent) {
        $navParent.removeClass('view__sidebar__navParent--active').addClass('view__sidebar__navParent');
      }
    };

    // -----
    // Sub Menu
    // -----

    var subMenu = {
      open: function open($subMenu) {
        var callback = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

        var $activeMenu = $('.view__sidebar__subNav--active');

        if ($activeMenu.length) {
          return subMenu.close($activeMenu, function () {
            return subMenu.open($subMenu);
          });
        }

        $subMenu.css('display', 'block').removeClass('view__sidebar__subNav').addClass('view__sidebar__subNav--active');

        return $.Velocity.animate($subMenu, { opacity: '1' }, {
          duration: 300,
          complete: callback()
        });
      },
      close: function close($subMenu) {
        var callback = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];

        return $.Velocity.animate($subMenu, { opacity: '0' }, {
          duration: 300,
          complete: function complete() {
            $subMenu.removeClass('view__sidebar__subNav--active').addClass('view__sidebar__subNav').css('display', 'none').attr('style', '');

            callback();
          }
        });
      }
    };

    // -----
    // Public Methods
    // -----

    self.selectSubMenu = function (element) {
      var $this = element;
      var $selectedMenu = $('.' + $this.data('target'));

      if (!$selectedMenu.length) return false;

      // If this item is already active, close everything
      if ($this.hasClass('view__sidebar__navItem--active')) {
        return closeNav();
      }

      // If the parent menu hasnt opened yet, open it.
      if (!self.navParent.hasClass('view__sidebar__navParent--active')) {
        parentMenu.open(self.navParent);
      }

      navItem.activate($this);
      subMenu.open($selectedMenu);
    };

    self.init = function () {
      $(self.navItem).on('click', function (e) {
        e.preventDefault();
        self.selectSubMenu($(this));
      });
    };

    (function () {
      self.init();
    })();

    return self;
  })();

  App.Module.Notification = (function () {

    var self = {};

    self.$notificationsContainer = $('.js-notifications');
    self.closeHtml = '<a class="js-notificationClose notification__close" href="#"><span class="icon--close"></span></a>';
    self.triggerClose = '.js-notificationClose';

    // -------------------------------------
    //   1. type - string
    //    - 'success'
    //    - 'error'
    //    - 'warning'
    //    2. Heading. Should be HTML.
    //    3. Message. Should be HTML.
    // -------------------------------------
    self.createNotification = function (heading, message, type) {
      var typeClass = 'notification';

      if (type) {
        typeClass += '--' + type;
      }

      // Create new DOM element and set it as a jQuery object
      var newNotification = document.createElement('div'),
          $notificationEl = $(newNotification);

      // Add the new object to the notifactions container
      self.$notificationsContainer.append($notificationEl);

      // Add classes, add message and close html, then animate it in
      $notificationEl.addClass('js-notification ' + typeClass).append('<h3>' + heading + '</h3><p>' + message + '</p>' + self.closeHtml).velocity({
        opacity: [1, 0],
        translateX: [0, 75],
        translateZ: 0
      }, 300);

      $notificationEl.find(self.triggerClose).on('click', function (e) {
        e.preventDefault();
        var notification = $(this).closest('.js-notification');
        self.closeNotification(notification);
      });
    };

    /* ----- Removes the notification that was clicked on ----- */
    self.closeNotification = function (notification) {
      notification.velocity({
        opacity: [0, 1],
        translateX: 75,
        translateZ: 0
      }, {
        duration: 200,
        complete: function complete() {
          $(this).remove();
        }
      });
    };

    self.init = function () {
      self.createNotification('This is a notification!', 'In recent years, a slash is the cod of an orange.', 'error');
      self.createNotification('This is a notification!', 'We can assume that any instance of a kilogram can be construed as a tubeless cent.', 'success');
      self.createNotification('This is a notification!', 'We can assume that any instance of a kilogram can be construed as a tubeless cent.', 'warning');
    };

    (function () {
      self.init();
    })();

    return self;
  })();

  App.Module.SearchFilters = (function () {

    var self = {};

    self.isShown = false, self.$searchFiltersTrigger = $('.js-toggleFilters--trigger'), self.$searchFiltersContainer = $('.js-searchFilters--container'), self.$searchFilters = $('.js-searchFilters'), self.$filterFieldSetTrigger = $('.search__filter-set h4');

    self.showFilters = function () {
      /* ----- Change button text to 'Hide' ----- */
      self.$searchFiltersTrigger.empty().text('Hide');
      /* ----- Scroll to search filters container ----- */
      self.$searchFiltersContainer.velocity('scroll', {
        duration: 400,
        mobileHA: false
      });
      /* ----- Displays the filters ----- */
      self.$searchFilters.addClass('is--active');
      self.isShown = true;
    };

    self.hideFilters = function () {
      /* ----- Change button text back to 'Show' ----- */
      self.$searchFiltersTrigger.empty().text('Show');
      /* ----- Hides the filters ----- */
      self.$searchFilters.removeClass('is--active');
      self.isShown = false;
    };

    /* ----- Toggles the filters for mobile ----- */
    self.toggleFilters = function () {
      self.isShown ? self.hideFilters() : self.showFilters();
    };

    /* ----- Accordion for filter on mobile ----- */
    self.filterAccordion = function (element) {
      var fieldset = element.parent('.search__filter-set');
      fieldset.toggleClass('is--active');
    };

    self.init = function () {
      self.$searchFiltersTrigger.on('click', function (e) {
        e.preventDefault();
        self.toggleFilters();
      });

      self.$filterFieldSetTrigger.on('click', function (e) {
        e.preventDefault();
        self.filterAccordion($(this));
      });
    };

    (function () {
      self.init();
    })();

    return self;
  })();

  App.Module.Tabs = (function () {

    var self = {};

    self.$tabLink = $('.js-tab--link'), self.$tabContent = $('.js-tab--content'), self.makeTabActive = function (tabLink) {
      self.$tabLink.removeClass('tab-active');
      tabLink.addClass('tab-active');
    };

    self.displayTab = function (tab) {
      var tabId = tab.attr('href'),
          tabEl = $(tabId);

      self.$tabContent.removeClass('tabs__content--active');
      tabEl.addClass('tabs__content--active');

      self.makeTabActive(tab);
    };

    self.init = function () {
      self.$tabLink.on('click', function (e) {
        e.preventDefault();
        self.displayTab($(this));
      });
    };

    (function () {
      self.init();
    })();

    return self;
  })();

  var Module = (function () {
    function Module(name, elements, handler, bindings) {
      var onStart = arguments.length <= 4 || arguments[4] === undefined ? function () {} : arguments[4];
      var onStop = arguments.length <= 5 || arguments[5] === undefined ? function () {} : arguments[5];

      _classCallCheck(this, Module);

      this.name = name;
      this.elements = elements;
      this.handler = handler;
      this.bindings = bindings;

      this.onStop = onStop;
      this.onStart = onStart;

      this._instances = {};
    }

    /* ------ Context ------ */

    _createClass(Module, [{
      key: 'bindContextToHandler',
      value: function bindContextToHandler(context) {
        // Navigate through the element list and translate them to jQuery elements
        for (var el in this.elements) {
          if (!this.elements.hasOwnProperty(el)) continue;
          context.$el[el] = context.$el._scope.find(this.elements[el]);
        }

        return this.callModuleHandler(context);
      }

      /* ------ Events ------ */

    }, {
      key: 'bindEventsToElement',
      value: function bindEventsToElement(element, events, handler, bindAction) {
        var action = bindAction === 'stop' ? 'unbind' : 'bind';

        <<<<<<< HEAD
        self.toggleSubMenu = function (element) {
          var $this = element;
          var $subMenu = $this.find('.navigation__subMenu');
          =======
              events = events instanceof Array ? events : [events];
          >>>>>>> 1a33068f6185f4224f3a019c2ad1e54b8d56dce8

          // Iterate through the list of event-handler pairs
          for (var _i5 = 0; _i5 < events.length; _i5++) {
            for (var event in events[_i5]) {
              element[action](event + '.' + this.name, handler[events[_i5][event]]);
            }
          }
        }
      }, {
      key: 'handleEventBindings',
      value: function handleEventBindings(context, action) {
        var bindings = this.bindings;
        var elements = context.$el;

        for (var el in this.bindings) {
          if (!bindings.hasOwnProperty(el)) continue;
          this.bindEventsToElement(elements[el], bindings[el], context.handler, action);
        }
      }

      /* ------ Handler ------ */

    }, {
      key: 'callModuleHandler',
      value: function callModuleHandler(context) {
        context.handler = new (Function.prototype.bind.call(this.handler, {}, context))();

        // Binding the module bindings to the elements
        this.handleEventBindings(context);

        // Call the onStart method
        this.onStart(context);

        return context.handler;
      }

      /* ------ Module ------ */

    }, {
      key: 'start',
      value: function start() {
        var scoppedEl = arguments.length <= 0 || arguments[0] === undefined ? 'body' : arguments[0];

        if (this._instances[scoppedEl]) {
          return this.handleEventBindings(this._instances[scoppedEl]);
        }

        this._instances[scoppedEl] = { $el: { _scope: $(scoppedEl) } };

        return this.bindContextToHandler(this._instances[scoppedEl]);
      }
    }, {
      key: 'stop',
      value: function stop(scoppedEl) {
        if (!this._instances[scoppedEl]) return;

        // Call the onStart method
        this.onStop(this._instances[scoppedEl]);

        return this.handleEventBindings(this._instances[scoppedEl], 'stop');
      }
    }]);

    return Module;
  })();

  var View = (function () {
    function View(name, modules) {
      _classCallCheck(this, View);

      this.name = name;
      this.modules = modules;
    }

    _createClass(View, [{
      key: 'handleModules',
      value: function handleModules(action) {
        action = action === 'stop' ? 'stop' : 'start';

        for (var mod in this.modules) {
          if (!this.modules.hasOwnProperty(mod)) continue;

          App.Module[mod][action](this.modules[mod]);
        }
      }

      /* ------ View ------ */

    }, {
      key: 'start',
      value: function start() {
        if (App.View._activeView) {
          App.View._activeView.stop();
        }

        App.View._activeView = this;

        return this.handleModules('start');
      }
    }, {
      key: 'stop',
      value: function stop() {
        return this.handleModules('stop');
      }
    }]);

    return View;
  })();

  App.View.CandidateProfile = function () {
    var areaGraphData = [[{ date: '07-01-15', data: 90 }, { date: '07-15-15', data: 23 }, { date: '08-01-15', data: 71 }, { date: '08-15-15', data: 51 }, { date: '09-01-15', data: 112 }, { date: '09-15-15', data: 39 }, { date: '10-01-15', data: 45 }, { date: '10-15-15', data: 8 }, { date: '11-01-15', data: 88 }], [{ date: '07-01-15', data: 30 }, { date: '07-15-15', data: 133 }, { date: '08-01-15', data: 21 }, { date: '08-15-15', data: 79 }, { date: '09-01-15', data: 52 }, { date: '09-15-15', data: 119 }, { date: '10-01-15', data: 15 }, { date: '10-15-15', data: 80 }, { date: '11-01-15', data: 14 }]];

    var lineGraphData = [{ date: '10-07-15', data: 10 }, { date: '10-08-15', data: 11 }, { date: '10-09-15', data: 13 }, { date: '10-10-15', data: 15 }, { date: '10-11-15', data: 10 }, { date: '10-12-15', data: 7 }, { date: '10-13-15', data: 8 }, { date: '10-14-15', data: 10 }, { date: '10-15-15', data: 10 }, { date: '10-16-15', data: 14 }, { date: '10-17-15', data: 15 }, { date: '10-18-15', data: 10 }];

    var circleGraphData = 33;

    App.Module.AreaGraph.init($('.js-graph--total-candidates'), areaGraphData);
    App.Module.LineGraph.init($('.js-graph--new-candidates'), lineGraphData);
    App.Module.CircleGraph.init($('.js-graph--pipeline-engagement'), circleGraphData);
    App.Module.BubbleGraph.init();
  };

  App.View.Dashboard = function () {
    var areaGraphData = [[{ date: '07-01-15', data: 90 }, { date: '07-15-15', data: 23 }, { date: '08-01-15', data: 71 }, { date: '08-15-15', data: 51 }, { date: '09-01-15', data: 112 }, { date: '09-15-15', data: 39 }, { date: '10-01-15', data: 45 }, { date: '10-15-15', data: 8 }, { date: '11-01-15', data: 88 }], [{ date: '07-01-15', data: 30 }, { date: '07-15-15', data: 133 }, { date: '08-01-15', data: 21 }, { date: '08-15-15', data: 79 }, { date: '09-01-15', data: 52 }, { date: '09-15-15', data: 119 }, { date: '10-01-15', data: 15 }, { date: '10-15-15', data: 80 }, { date: '11-01-15', data: 14 }]];

    var lineGraphData = [{ date: '10-07-15', data: 10 }, { date: '10-08-15', data: 11 }, { date: '10-09-15', data: 13 }, { date: '10-10-15', data: 15 }, { date: '10-11-15', data: 10 }, { date: '10-12-15', data: 7 }, { date: '10-13-15', data: 8 }, { date: '10-14-15', data: 10 }, { date: '10-15-15', data: 10 }, { date: '10-16-15', data: 14 }, { date: '10-17-15', data: 15 }, { date: '10-18-15', data: 10 }];

    var circleGraphData = 33;

    App.Module.AreaGraph.init($('.js-graph--total-candidates'), areaGraphData);
    App.Module.LineGraph.init($('.js-graph--new-candidates'), lineGraphData);
    App.Module.CircleGraph.init($('.js-graph--pipeline-engagement'), circleGraphData);
  };

  App.View.EmailCampaignDetail = function () {
    var areaGraphData = [[{ date: '07-01-15', data: 90 }, { date: '07-15-15', data: 23 }, { date: '08-01-15', data: 71 }, { date: '08-15-15', data: 51 }, { date: '09-01-15', data: 112 }, { date: '09-15-15', data: 39 }, { date: '10-01-15', data: 45 }, { date: '10-15-15', data: 8 }, { date: '11-01-15', data: 88 }], [{ date: '07-01-15', data: 30 }, { date: '07-15-15', data: 133 }, { date: '08-01-15', data: 21 }, { date: '08-15-15', data: 79 }, { date: '09-01-15', data: 52 }, { date: '09-15-15', data: 119 }, { date: '10-01-15', data: 15 }, { date: '10-15-15', data: 80 }, { date: '11-01-15', data: 14 }]];

    App.Module.AreaGraph.init($('.js-graph--total-candidates'), areaGraphData);
  };

  App.View.EngageDashboard = function () {
    var areaGraphData = [[{ date: '07-01-15', data: 90 }, { date: '07-15-15', data: 23 }, { date: '08-01-15', data: 71 }, { date: '08-15-15', data: 51 }, { date: '09-01-15', data: 112 }, { date: '09-15-15', data: 39 }, { date: '10-01-15', data: 45 }, { date: '10-15-15', data: 8 }, { date: '11-01-15', data: 88 }], [{ date: '07-01-15', data: 30 }, { date: '07-15-15', data: 133 }, { date: '08-01-15', data: 21 }, { date: '08-15-15', data: 79 }, { date: '09-01-15', data: 52 }, { date: '09-15-15', data: 119 }, { date: '10-01-15', data: 15 }, { date: '10-15-15', data: 80 }, { date: '11-01-15', data: 14 }]];

    var circleGraphData = 33;

    App.Module.AreaGraph.init($('.js-graph--total-candidates'), areaGraphData);
    App.Module.CircleGraph.init($('.js-graph--pipeline-engagement'), circleGraphData);
  };

  App.View.OrganizeDashboard = function () {
    var areaGraphData = [[{ date: '07-01-15', data: 90 }, { date: '07-15-15', data: 23 }, { date: '08-01-15', data: 71 }, { date: '08-15-15', data: 51 }, { date: '09-01-15', data: 112 }, { date: '09-15-15', data: 39 }, { date: '10-01-15', data: 45 }, { date: '10-15-15', data: 8 }, { date: '11-01-15', data: 88 }], [{ date: '07-01-15', data: 30 }, { date: '07-15-15', data: 133 }, { date: '08-01-15', data: 21 }, { date: '08-15-15', data: 79 }, { date: '09-01-15', data: 52 }, { date: '09-15-15', data: 119 }, { date: '10-01-15', data: 15 }, { date: '10-15-15', data: 80 }, { date: '11-01-15', data: 14 }]];

    App.Module.AreaGraph.init($('.js-graph--total-candidates'), areaGraphData);
  };

  App.View.Search = function () {
    App.Module.BubbleGraph.init();
  };})(this);